plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "2.2.0"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	
	// Modrinth Maven for Sodium and Lithium
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	}

	maven {
		name = "Jitpack"
		url = "https://jitpack.io"
	}
	// For ViaFabricPlus
	maven {
		name "viaversion"
		url "https://repo.viaversion.com/everything"
	}
	
	// For Mod Menu
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}

	maven {
		name = "OpenCollab Snapshots"
		url = "https://repo.opencollab.dev/maven-snapshots/"
	}

	maven {
		name = "Lenni0451"
		url = "https://maven.lenni0451.net/everything"
	}
	
	// For JavaCV
	maven {
		name = "Sonatype Releases"
		url = "https://oss.sonatype.org/content/repositories/releases"
	}

	maven {
		name = "Sonatype Snapshots"
		url = "https://oss.sonatype.org/content/repositories/snapshots"
	}
}

loom {
	mods {
		"skypvp" {
			sourceSet sourceSets.main
		}
	}
}

fabricApi {
	configureDataGeneration {
		client = false
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	include "net.fabricmc.fabric-api:fabric-message-api-v1:6.1.1+946bf4c36c"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
	
	// Mod Menu
	modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"
	
	// JavaCV dependencies
	implementation "org.bytedeco:javacv:${project.javacv_version}"
	implementation "org.bytedeco:javacpp:${project.javacv_version}"
	implementation "org.bytedeco:ffmpeg:6.1.1-${project.javacv_version}"

	// Include the platform-specific dependencies for Windows
	implementation "org.bytedeco:javacpp:${project.javacv_version}:windows-x86_64"
	implementation "org.bytedeco:ffmpeg:6.1.1-${project.javacv_version}:windows-x86_64"

	// Include these dependencies in the final JAR
	include "org.bytedeco:javacv:${project.javacv_version}"
	include "org.bytedeco:javacpp:${project.javacv_version}"
	include "org.bytedeco:ffmpeg:6.1.1-${project.javacv_version}"
	include "org.bytedeco:javacpp:${project.javacv_version}:windows-x86_64"
	include "org.bytedeco:ffmpeg:6.1.1-${project.javacv_version}:windows-x86_64"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 21
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}